/*!
 * papapa v1.0.0 (https://github.com/latel/papapa#readme)
 * Copyright 2016, kevinnwang <latelx64@icloud.com>
 * MIT license
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Papapa"] = factory();
	else
		root["Papapa"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * 虚拟键盘
	 * @class Papapa
	 * @version 1.0.0
	 * @author: Kevinnwang <latelx64@icloud.com>
	 * @date: 2016.10.28
	 */

	'use strict';

	// 引入键盘框架、目标键盘模块和样式表

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _framework = __webpack_require__(1);

	var _framework2 = _interopRequireDefault(_framework);

	var _index = __webpack_require__(10);

	var _index2 = _interopRequireDefault(_index);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/*
	    * Papapa虚拟键盘类
	    *
	    * @class Papapa
	    * @param {Object} options - 初始化键盘的选项
	    * @constructor
	    * @return {Object} 指定类型的微证券虚拟键盘的实例
	    */
	function Papapa(options) {
	    options = 'object' === (typeof options === 'undefined' ? 'undefined' : _typeof(options)) ? options : {};

	    switch (options.keyboardType) {

	        case 'numpad':
	            return new _index2.default(options);
	            break;

	        default:
	            throw new TypeError(options.type ? 'papapa keyboard type ' + options.type + ' is not available.' : 'must specialfy a papapa keyboard type.');
	            break;
	    }
	}

	// 将所有类型的键盘直接挂载为 Papapa 的子类型方便调用
	Papapa.Framework = _framework2.default;

	Papapa.Numpad = _index2.default;

	// 版本号
	Papapa.version = '1.0.0';

	module.exports = Papapa;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _util = __webpack_require__(2);

	var util = _interopRequireWildcard(_util);

	__webpack_require__(4);

	var _target = __webpack_require__(8);

	var _target2 = _interopRequireDefault(_target);

	var _keyboard = __webpack_require__(9);

	var _keyboard2 = _interopRequireDefault(_keyboard);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ClassNames = { // 键盘的样式Hooks
	    Keyboard: 'papapa-keyboard',
	    Target: 'papapa-target',
	    Empty: 'papapa-keyboard-empty',
	    Popup: 'papapa-keyboard-popup',
	    ThemedBy: 'papapa-keyboard-theme--',
	    StateAt: 'papapa-keyboard-state--',
	    Direction: {
	        Landscape: 'papapa-direction-landscape'
	    },
	    Key: 'papapa-keyboard-key',
	    KeyTap: 'papapa-keyboard-key--tap',
	    HasPlaceHolder: 'papapa-keyboard-hasplaceholder',
	    HasPlaceHolderVisible: 'papapa-keyboard-haspalceholder--visible',
	    Disable: 'papapa-keyboard-disable',
	    ShiftLock: 'papapa-keyboard-shiftlock',
	    CapsLock: 'papapa-keyboard-capslock',
	    Cursor: 'papapa-target-cursor'
	},
	    Direction = {
	    Portrait: 'portrait',
	    Landscape: 'landscape'
	};

	var PapapaFramework = function () {
	    function PapapaFramework(template, options) {
	        _classCallCheck(this, PapapaFramework);

	        this._index = PapapaFramework.index++;
	        this._options = options = options || {}; // 键盘实例的配置
	        this._template = template || _keyboard2.default;
	        this._state = { // 键盘实例可用的状态
	            normal: true
	        };
	        this._events = {}; // 记录注册的事件

	        this.$keyboard = null; // 键盘的容器
	        this.$target = null; // 绑定的虚拟input容器

	        this.maxLength = Infinity;
	        this.isPopup = false; // 键盘是否已弹起
	        this.value = ''; // 当前的值
	        this.isEmpty = true; // 当前值是否为空
	        this.isDisabled = false; // 是否被禁用
	        this.hasPlaceHolder = false; // 是否有placeholder
	        this.hasPlaceHolderVisible = false; // placeholder是否可见
	        this.direction = Direction.Portrait;
	        this.capsLock = false;
	        this.shiftLock = false;

	        this._initDymaticProperties();
	        this._prepareKeyboard();
	        this._prepareTarget();
	        this._watchDirectionChanges();
	        this._bindEvents();
	    }

	    _createClass(PapapaFramework, [{
	        key: 'setValue',
	        value: function setValue(newValue) {
	            var currentValue;
	            if (this.$target /* && this._options.pattern.test(newValue)*/) {
	                    currentValue = this.value;
	                    if (this._dispatchEvent('change', currentValue, newValue)) {
	                        this.value = newValue;
	                        this.$target.children[0].innerHTML = newValue;
	                        if (this.value) {
	                            this._class.remove(PapapaFramework.ClassNames.HasPlaceHolderVisible, PapapaFramework.ClassNames.Empty);
	                            this.$target.classList.add(PapapaFramework.ClassNames.Cursor);
	                        } else {
	                            this._class.add(PapapaFramework.ClassNames.Empty);
	                        }
	                    } else {
	                        this._dispatchEvent('unchange', currentValue, newValue);
	                    }
	                }
	        }
	    }, {
	        key: 'popup',
	        value: function popup() {
	            if (this._dispatchEvent('popup')) {
	                this._class.add(PapapaFramework.ClassNames.Popup);
	                this.isPopup = true;
	                if (this.$target && !this.value) {
	                    this._class.remove(PapapaFramework.ClassNames.HasPlaceHolderVisible);
	                    this.$target.classList.add(PapapaFramework.ClassNames.Cursor);
	                    this.$target.children[0].innerHTML = '';
	                }
	            } else {
	                this._dispatchEvent('unpopup');
	            }
	        }
	    }, {
	        key: 'fold',
	        value: function fold() {
	            if (this._dispatchEvent('fold')) {
	                this._class.remove(PapapaFramework.ClassNames.Popup);
	                this.isPopup = false;
	                if (!this.value) {
	                    this.$target.children[0].innerHTML = this._options.placeHolder;
	                    this._class.add(PapapaFramework.ClassNames.HasPlaceHolderVisible);
	                    if (this.$target) {
	                        this.$target.classList.remove(PapapaFramework.ClassNames.Cursor);
	                    }
	                }
	            } else {
	                this._dispatchEvent('unfold');
	            }
	        }
	    }, {
	        key: 'destory',
	        value: function destory() {
	            if (this._dispatchEvent('event')) {
	                console.log('destoried');
	            }
	        }
	    }, {
	        key: 'on',
	        value: function on(eventName, handler) {
	            if ('string' === typeof eventName && 'function' === typeof handler) {
	                return this._registerEvent(eventName, handler);
	            }
	        }
	    }, {
	        key: 'when',
	        value: function when() {
	            this.on.apply(this, arguments);
	        }
	    }, {
	        key: 'off',
	        value: function off(eventName, eventId) {
	            if ('string' === typeof eventName) {
	                this._delEvent(eventName, eventId);
	            }
	        }
	    }, {
	        key: '_initDymaticProperties',
	        value: function _initDymaticProperties() {
	            var self = this;

	            Object.defineProperties(this, {
	                size: {
	                    configurable: false,
	                    get: function get() {
	                        return {
	                            width: self.$keyboard.offsetWidth,
	                            height: self.$keyboard.offsetHeight
	                        };
	                    }
	                }
	            });
	        }
	    }, {
	        key: '_prepareTarget',
	        value: function _prepareTarget() {
	            var preSetValue;
	            if (this._options.target instanceof Element) {
	                this.$target = this._options.target;
	                this.$target.classList.add(PapapaFramework.ClassNames.Target);

	                util.merge(this._options, {
	                    maxLength: this.$target.getAttribute('maxlength'),
	                    placeHolder: this.$target.getAttribute('placeholder'),
	                    pattern: this.$target.getAttribute('pattern')
	                });
	                this._options.pattern = this._options.pattern || /.*/g;

	                if (this.hasPlaceHolder = this._options.target.getAttribute('placeholder') ? true : false) {
	                    this._class.add(PapapaFramework.ClassNames.HasPlaceHolder, PapapaFramework.ClassNames.HasPlaceHolderVisible);
	                }
	                if (this._options.target.innerHTML) {
	                    preSetValue = this.$target.innerHTML;
	                    this.hasPlaceholderVisible = false;
	                    this._class.remove(PapapaFramework.ClassNames.Empty, PapapaFramework.ClassNames.HasPlaceHolderVisible);
	                    this._class.add(PapapaFramework.ClassNames.Empty);
	                } else if (this.hasPlaceHolder) {
	                    this.$target.children[0].innerHTML = this._options.placeHolder;
	                }
	                this.$target.innerHTML = '';
	                this.$target.insertAdjacentElement('beforeend', util.render(_target2.default));
	                this.$target.children[0].style.height = this.$target.offsetHeight + 'px';
	                this.setValue(preSetValue);
	            } else {
	                delete this._options.target;
	            }
	        }
	    }, {
	        key: '_prepareKeyboard',
	        value: function _prepareKeyboard() {
	            if (this._template) {
	                this.$keyboard = util.render(this._template, {
	                    options: this._options
	                });
	                this.$keyboard.id = this._index;
	                document.body.appendChild(this.$keyboard);
	            } else {
	                throw new Error('papapa keyboard template is not ready.');
	            }
	        }
	    }, {
	        key: '_applyTheme',
	        value: function _applyTheme(themeName) {}
	    }, {
	        key: '_changeInternalState',
	        value: function _changeInternalState(state) {}
	    }, {
	        key: '_watchDirectionChanges',
	        value: function _watchDirectionChanges() {
	            var self = this,
	                orientation = ['portrait',, 'landscape'][window.orientation & 2];

	            this.direction = orientation;
	            if (PapapaFramework.ClassNames.Direction.Landscape === orientation) {
	                self._class.add(PapapaFramework.ClassNames.Direction.Landscape);
	            }

	            function orientationChangeHandler() {
	                if (PapapaFramework.Direction.Landscape === ['portrait',, 'landscape'][window.orientation & 2]) {
	                    self.direction = PapapaFramework.Direction.Landscape;
	                    self._class.add(PapapaFramework.ClassNames.Direction.Landscape);
	                } else {
	                    self.direction = PapapaFramework.Direction.Portrait;
	                    self._class.remove(PapapaFramework.ClassNames.Direction.Landscape);
	                }

	                self._dispatchEvent('orientationchange', self.direction);
	            }

	            window.addEventListener('orientationchange', orientationChangeHandler, false);
	        }
	    }, {
	        key: '_registerEvent',
	        value: function _registerEvent(eventName, handler) {
	            this._properEventMapType(eventName);
	            this._events[eventName].push(handler);
	            return handler;
	        }
	    }, {
	        key: '_delEvent',
	        value: function _delEvent(eventName, handlerId) {
	            this._properEventMapType(eventName);
	            if (undefined === handlerId) {
	                delete this._events[eventName];
	            } else {
	                for (var i = 0; i < this._events[eventName].length; i++) {
	                    if (this._events[eventName][i] === handlerId) {
	                        this._events[eventName] = this._events[eventName].slice(0, i).concat(this._events[eventName].slice(i + 1));
	                        break;
	                    }
	                }
	            }
	        }
	    }, {
	        key: '_dispatchEvent',
	        value: function _dispatchEvent(eventName) {
	            var checkResult = true,
	                result;
	            this._properEventMapType(eventName);
	            for (var i = 0; i < this._events[eventName].length; i++) {
	                result = this._events[eventName][i].apply(this, Array.prototype.slice.call(arguments, 1));
	                // 如果已经标记为错误，就一直保持为错误
	                checkResult = checkResult ? result : checkResult;
	            }
	            return checkResult;
	        }
	    }, {
	        key: '_properEventMapType',
	        value: function _properEventMapType(eventName) {
	            this._events[eventName] = this._events[eventName] || [];
	        }
	    }, {
	        key: '_bindEvents',
	        value: function _bindEvents() {
	            var self = this;
	            util.delegate(this.$keyboard, 'touchstart', '.' + PapapaFramework.ClassNames.Key, function (ev) {
	                ev.stopPropagation();
	                this.classList.add(PapapaFramework.ClassNames.KeyTap);
	            });
	            util.delegate(this.$keyboard, 'touchend', '.' + PapapaFramework.ClassNames.Key, function (ev) {
	                var keyCode = +this.getAttribute('data-key');
	                ev.stopPropagation();
	                this.classList.remove(PapapaFramework.ClassNames.KeyTap);
	                if (self._dispatchEvent('keyup', keyCode)) {
	                    switch (keyCode) {
	                        case 8:
	                            self.setValue(self.value.slice(0, -1));
	                            break;

	                        case 13:
	                            self.fold();
	                            break;

	                        default:
	                            self.setValue(self.value + String.fromCharCode(keyCode));
	                            break;
	                    }
	                }
	            });
	            if (this._options.physical) {
	                // 监听并响应真实键盘
	                window.addEventListener('keydown', function (ev) {
	                    switch (ev.keyCode) {
	                        case 16:
	                            self.shiftLock = true;
	                            self._class.add(PapapaFramework.ClassNames.ShiftLock);
	                            break;
	                        case 20:
	                            self.capsLock = true;
	                            self._class.add(PapapaFramework.ClassNames.CapsLock);
	                            break;
	                        default:
	                            break;
	                    }
	                });
	                window.addEventListener('keyup', function (ev) {
	                    switch (ev.keyCode) {
	                        case 16:
	                            self.shiftLock = false;
	                            self._class.remove(PapapaFramework.ClassNames.ShiftLock);
	                            break;

	                        case 20:
	                            self.capsLock = false;
	                            self._class.remove(PapapaFramework.ClassNames.CapsLock);
	                            break;

	                        case 8:
	                            self.setValue(self.value.slice(0, -1));
	                            break;

	                        case 13:
	                            self.fold();
	                            break;

	                        default:
	                            self.setValue(self.value + String.fromCharCode(self.capsLock || self.shiftLock ? ev.keyCode : ev.keyCode + 32));
	                            break;
	                    }
	                });
	            }
	            if (this.$target) {
	                this.$target.addEventListener('touchend', function (ev) {
	                    self.popup();
	                    ev.stopPropagation();
	                }, false);
	            }
	        }
	    }, {
	        key: '_class',
	        get: function get() {
	            var self = this;
	            return {
	                add: function add() {
	                    var _self$$keyboard$class;

	                    (_self$$keyboard$class = self.$keyboard.classList).add.apply(_self$$keyboard$class, arguments);
	                    if (self._options.target) {
	                        var _self$$target$classLi;

	                        (_self$$target$classLi = self.$target.classList).add.apply(_self$$target$classLi, arguments);
	                    }
	                },
	                remove: function remove() {
	                    var _self$$keyboard$class2;

	                    (_self$$keyboard$class2 = self.$keyboard.classList).remove.apply(_self$$keyboard$class2, arguments);
	                    if (self._options.target) {
	                        var _self$$target$classLi2;

	                        (_self$$target$classLi2 = self.$target.classList).remove.apply(_self$$target$classLi2, arguments);
	                    }
	                }
	            };
	        }
	    }]);

	    return PapapaFramework;
	}();

	PapapaFramework.index = 0;
	PapapaFramework.ClassNames = ClassNames;
	PapapaFramework.Direction = Direction;

	exports.default = PapapaFramework;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.extend = extend;
	exports.merge = merge;
	exports.render = render;
	exports.delegate = delegate;

	var _mito = __webpack_require__(3);

	var _mito2 = _interopRequireDefault(_mito);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function extend(original, overriten) {
	    for (var i in overriten) {
	        if (overriten.hasOwnProperty(i)) {
	            original[i] = overriten[i];
	        }
	    }

	    return original;
	}

	function merge(original, toMerge) {
	    for (var i in toMerge) {
	        if (toMerge.hasOwnProperty(i) && original[i] === undefined) {
	            original[i] = toMerge[i];
	        }
	    }

	    return original;
	}

	function render(template, data) {
	    var el = document.createElement('DIV');
	    el.innerHTML = (0, _mito2.default)(template)(data || {});
	    return el.children[0];
	}

	function delegate($el, eventType, selector, fn) {
	    if (!$el) {
	        return;
	    }
	    $el.addEventListener(eventType, function (e) {
	        var targets = $el.querySelectorAll(selector);
	        if (!targets) {
	            return;
	        }
	        findTarget: for (var i = 0; i < targets.length; i++) {
	            var $node = e.target;
	            while ($node) {
	                if ($node == targets[i]) {
	                    fn.call($node, e);
	                    break findTarget;
	                }
	                $node = $node.parentNode;
	                if ($node == $el) {
	                    break;
	                }
	            }
	        }
	    }, false);
	}

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * This is forked from John Resig's micro-templating function
	 * http://ejohn.org/blog/javascript-micro-templating/
	 *
	 * Also thanks to Neil Donewar's correction
	 * http://ejohn.org/blog/javascript-micro-templating/#comment-321850
	 *
	 * Generate a reusable function that will serve as a template generator.
	 *
	 * @param {String} str The template string
	 * @param {String} [replace='replace'] Don't use
	 * @return {Function} Template function
	 */
	module.exports = function (str, replace) {
	    /* eslint no-new-func: 0, no-unexpected-multiline: 0 */

	    replace = 'replace';

	    /**
	     * Renders the given template parameter.
	     *
	     * @param {Object} o The template parameter
	     * @param {String} [J=''] The string buffer (don't use)
	     * @return {String} Rendered string
	     */
	    return Function('o,J',

	    // Introduces the data as local variables using with(){}
	    'with(o||{}){J=\'' +

	    // Converts the template into pure JavaScript
	    str[replace](/\s/g, ' ')

	    // Converts the opening tag to \0
	    [replace](/<%/g, '\0')

	    // Escapes single quote, \r and \n in literal mode to the escape sequence
	    // (escaped \r and \n means line continuations, = empty)
	    [replace](/'(?![^\0]*%>)/g, '\\$&')

	    // Replaces <%= ... %> pattern, using non-greedy matching (.*?)
	    [replace](/\0=(.*?)%>/g, '\0J+=$1%>')

	    // Converts the opening and closing tags
	    [replace](/\0/g, '\';')[replace](/%>/g, ';J+=\'') + '\'}' + 'return J');
	};

/***/ },
/* 4 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */
/***/ function(module, exports) {

	module.exports = "<span class=\"papapa-target-input\"></span>";

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = "<div class=\"papapa-keyboard\">\n    <a href=\"https://github.com/latel/papapa/\">Star Papapa</a>\n    <style>\n        .papapa-keyboard {\n            background: #d8d9db;\n        }\n\n        .papapa-keyboard a {\n            border: 1px solid #8c8c8c;\n            border-radius: 3px;\n            padding: 1rem;\n            display: block;\n            margin: 6rem auto 4rem;\n            text-align: center;\n            width: 30%;\n            text-decoration: none;\n            color: #4e4e4e;\n        }\n    </style>\n</div>";

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _framework = __webpack_require__(1);

	var _framework2 = _interopRequireDefault(_framework);

	var _util = __webpack_require__(2);

	var util = _interopRequireWildcard(_util);

	__webpack_require__(11);

	var _index = __webpack_require__(13);

	var _index2 = _interopRequireDefault(_index);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Numpad = function (_PapapaFramework) {
	    _inherits(Numpad, _PapapaFramework);

	    function Numpad() {
	        var _ref;

	        _classCallCheck(this, Numpad);

	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }

	        return _possibleConstructorReturn(this, (_ref = Numpad.__proto__ || Object.getPrototypeOf(Numpad)).call.apply(_ref, [this, _index2.default].concat(args)));
	    }

	    return Numpad;
	}(_framework2.default);

	exports.default = Numpad;

/***/ },
/* 11 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 12 */,
/* 13 */
/***/ function(module, exports) {

	module.exports = "<div class=\"papapa-keyboard papapa-keyboard-numpad\">\n    <ul class=\"pop-cnt-txt black\">\n        <li class=\"papapa-keyboard-key\" data-key=\"49\">1</li>\n        <li class=\"papapa-keyboard-key\" data-key=\"50\">2</li>\n        <li class=\"papapa-keyboard-key\" data-key=\"51\">3</li>\n        <li class=\"papapa-keyboard-key\" data-key=\"52\">4</li>\n        <li class=\"papapa-keyboard-key\" data-key=\"53\">5</li>\n        <li class=\"papapa-keyboard-key\" data-key=\"54\">6</li>\n        <li class=\"papapa-keyboard-key\" data-key=\"55\">7</li>\n        <li class=\"papapa-keyboard-key\" data-key=\"56\">8</li>\n        <li class=\"papapa-keyboard-key\" data-key=\"57\">9</li>\n        <% if (options.withDot) {%>\n        <li class=\"papapa-keyboard-key\" data-key=\"46\">.</li>\n        <%} else {%>\n        <li class=\"\"></li>\n        <%}%>\n        <li class=\"papapa-keyboard-key\" data-key=\"48\">0</li>\n        <li class=\"papapa-keyboard-key key-del icon-backspace\" data-key=\"8\"></li>\n    </ul>\n</div>";

/***/ }
/******/ ])
});
;